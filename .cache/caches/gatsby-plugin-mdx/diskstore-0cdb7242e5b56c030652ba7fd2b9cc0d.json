{"expireTime":9007200844352479000,"key":"gatsby-plugin-mdx-entire-payload-cdf0dc727c7e5d7ded0517f4466a895e-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":5,"offset":4},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Ramer-Douglas–Peucker Algorithm","position":{"start":{"line":1,"column":7,"offset":6},"end":{"line":1,"column":38,"offset":37},"indent":[]}}],"position":{"start":{"line":1,"column":5,"offset":4},"end":{"line":1,"column":40,"offset":39},"indent":[]}},{"type":"text","value":" is a an algorithms that reduce the number of points that is approximated by a series of points. It is also known as the ","position":{"start":{"line":1,"column":40,"offset":39},"end":{"line":1,"column":161,"offset":160},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Douglas–Peucker algorithm","position":{"start":{"line":1,"column":163,"offset":162},"end":{"line":1,"column":188,"offset":187},"indent":[]}}],"position":{"start":{"line":1,"column":161,"offset":160},"end":{"line":1,"column":190,"offset":189},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":1,"column":190,"offset":189},"end":{"line":1,"column":195,"offset":194},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"iterative end-point fit algorithm","position":{"start":{"line":1,"column":197,"offset":196},"end":{"line":1,"column":230,"offset":229},"indent":[]}}],"position":{"start":{"line":1,"column":195,"offset":194},"end":{"line":1,"column":232,"offset":231},"indent":[]}},{"type":"text","value":". In simple words, it represent a complex line with fewer points in a visually proper way.","position":{"start":{"line":1,"column":232,"offset":231},"end":{"line":1,"column":322,"offset":321},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":322,"offset":321},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Overview","position":{"start":{"line":3,"column":5,"offset":327},"end":{"line":3,"column":13,"offset":335},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":323},"end":{"line":3,"column":13,"offset":335},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The main purpose of this algorithm is to find a similar curve with fewer points for a given curve composed of line segments (also called ","position":{"start":{"line":5,"column":1,"offset":337},"end":{"line":5,"column":138,"offset":474},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Polylines","position":{"start":{"line":5,"column":140,"offset":476},"end":{"line":5,"column":149,"offset":485},"indent":[]}}],"position":{"start":{"line":5,"column":138,"offset":474},"end":{"line":5,"column":151,"offset":487},"indent":[]}},{"type":"text","value":"). This algorithm define 'disimilar' based on the maxium distance between the original curve and the simplied curve, i.e. the Hausdroff Distance. The Hausdroff distance is the longest distance you can be forced to travel by an adversary who chooses a point in one of the two sets, from where you then must travel to the other set. The simplified curve consist of a subset of points that defined the original curve.","position":{"start":{"line":5,"column":151,"offset":487},"end":{"line":5,"column":565,"offset":901},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":337},"end":{"line":5,"column":565,"offset":901},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"How It Works","position":{"start":{"line":9,"column":5,"offset":909},"end":{"line":9,"column":17,"offset":921},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":905},"end":{"line":9,"column":17,"offset":921},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"RDP Algoirthms\",\"date\":\"2020-04-19T00:00:00.000Z\",\"tags\":[\"Algorithms\"]}","position":{"start":{"line":12,"column":1,"offset":924},"end":{"line":12,"column":111,"offset":1034},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":12,"column":111,"offset":1034}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"RDP Algoirthms\",\n  \"date\": \"2020-04-19T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Ramer-Douglas\\u2013Peucker Algorithm\"), \" is a an algorithms that reduce the number of points that is approximated by a series of points. It is also known as the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Douglas\\u2013Peucker algorithm\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"iterative end-point fit algorithm\"), \". In simple words, it represent a complex line with fewer points in a visually proper way.\"), mdx(\"h3\", null, \"Overview\"), mdx(\"p\", null, \"The main purpose of this algorithm is to find a similar curve with fewer points for a given curve composed of line segments (also called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Polylines\"), \"). This algorithm define 'disimilar' based on the maxium distance between the original curve and the simplied curve, i.e. the Hausdroff Distance. The Hausdroff distance is the longest distance you can be forced to travel by an adversary who chooses a point in one of the two sets, from where you then must travel to the other set. The simplified curve consist of a subset of points that defined the original curve.\"), mdx(\"h3\", null, \"How It Works\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"RDP Algoirthms\",\n  \"date\": \"2020-04-19T00:00:00.000Z\",\n  \"tags\": [\"Algorithms\"]\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`The `}<strong parentName=\"p\">{`Ramer-Douglas–Peucker Algorithm`}</strong>{` is a an algorithms that reduce the number of points that is approximated by a series of points. It is also known as the `}<strong parentName=\"p\">{`Douglas–Peucker algorithm`}</strong>{` and `}<strong parentName=\"p\">{`iterative end-point fit algorithm`}</strong>{`. In simple words, it represent a complex line with fewer points in a visually proper way.`}</p>\n    <h3>{`Overview`}</h3>\n    <p>{`The main purpose of this algorithm is to find a similar curve with fewer points for a given curve composed of line segments (also called `}<strong parentName=\"p\">{`Polylines`}</strong>{`). This algorithm define 'disimilar' based on the maxium distance between the original curve and the simplied curve, i.e. the Hausdroff Distance. The Hausdroff distance is the longest distance you can be forced to travel by an adversary who chooses a point in one of the two sets, from where you then must travel to the other set. The simplified curve consist of a subset of points that defined the original curve.`}</p>\n    <h3>{`How It Works`}</h3>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}